version (u32)1
interface "/input"
description ""

struct "Joint" {
	description "A hand joint. Distance from input handler's field is given because it's cheap to calculate and laggy to request from the server."

	field "position" type="vec3"
	field "rotation" type="quat"
	field "radius"   type="float"
	field "distance" type="float"
}
struct "Finger" {
	description ""

	field "tip"          type="struct" struct="Joint"
	field "distal"       type="struct" struct="Joint"
	field "intermediate" type="struct" struct="Joint"
	field "proximal"     type="struct" struct="Joint"
	field "metacarpal"   type="struct" struct="Joint"
}
struct "Thumb" {
	description "Different than finger to be explicit about number of joints."

	field "tip"        type="struct" struct="Joint"
	field "distal"     type="struct" struct="Joint"
	field "proximal"   type="struct" struct="Joint"
	field "metacarpal" type="struct" struct="Joint"
}
struct "Pointer" {
	description "A 3D pointer, such as a gaze pointer for eye tracking or a mouse or a ray from a controller."

	field "origin" type="vec3"
	field "orientation" type="quat"
	field "deepest_point" type="vec3" description=r#"
	The point that is the most inside the input handler's field.
	Useful for telling how close to the center it's pointing or for thin objects can take the place of a point of intersection.
	"#
}
struct "Hand" {
	description "A fully articulated and tracked hand."

	field "right"  type="bool"
	field "thumb"  type="struct" struct="Thumb"
	field "index"  type="struct" struct="Finger"
	field "middle" type="struct" struct="Finger"
	field "ring"   type="struct" struct="Finger"
	field "little" type="struct" struct="Finger"
	field "palm"   type="struct" struct="Joint"
	field "wrist"  type="struct" struct="Joint"
	field "elbow"  type="struct" struct="Joint" optional=true
}
struct "Tip" {
	description "Represents a controller, pen tip, spatial cursor, etc. that is just a single point."

	field "origin" type="vec3"
	field "orientation" type="quat"
}
union "InputDataType" {
	description "The special type of an InputMethod."

	option type="struct" struct="Pointer"
	option type="struct" struct="Hand"
	option type="struct" struct="Tip"
}
struct "InputData" {
	description "Information about a given input method's state relative to an input handler. All coordinates are relative to the InputHandler."

	field "uid"      type="string" description="Used to uniquely identify the input method so state can be tracked across input events."
	field "input"    type="struct" struct="InputDataType" description="All vectors and quaternions are relative to the input handler if deserialized."
	field "distance" type="float" description="Closest distance from the input handler to the field."
	field "datamap"  type="datamap" description="Non-spatial data in a map."
	field "order"    type="uint" description="There are [order] objects that got this input data before this one."
	field "captured" type="bool" description="Is this input handler capturing this input method?"
}

signal "create_input_method" side="server" {
	description "Create an input method node"

	argument "name" type="string"
	argument "parent" type="node" aspect="spatial"
	argument "transform" type="struct" struct="transform"
	argument "initial_data" type="struct" struct="InputDataType"
	argument "datamap" type="datamap"
	return type="node" node="InputMethod" parent="/input/method" name_argument="name"
}
aspect "InputMethod" {
	description "Node representing a spatial input device"
	inherits "Spatial"

	signal "set_input" side="server" {
		description "Set the spatial input component of this input method. You must keep the same input data type throughout the entire thing."

		argument "input" type="struct" struct="InputDataType"
	}
	signal "set_datamap" side="server" {
		description "Set the datamap of this input method"

		argument "datamap" type="datamap"
	}
	signal "set_handler_order" side="server" {
		description "Set the order of handlers to propagate input to."

		argument "handlers" type="vec" member_type="node" aspect="InputHandler"
	}
	signal "request_capture" side="server" {
		description "Have the input handler that this method reference came from capture the method for the next frame."

		argument "handler" type="node" aspect="InputHandler"
	}

	signal "create_handler" side="client" {
		description "A new input handler has just been created."

		argument "uid" type="string"
		argument "handler" type="node" aspect="InputHandler"
	    argument "field" type="node" aspect="Field"
	}
	signal "request_capture_handler" side="client" {
		description "An input handler requests to capture this input method."

		argument "uid" type="string"
	}
	signal "destroy_handler" side="client" {
		description "An input handler has just been destroyed."

		argument "uid" type="string"
	}
}

signal "create_input_handler" side="server" {
	description "Create an input handler node"

	argument "name" type="string"
	argument "parent" type="node" aspect="spatial"
	argument "transform" type="struct" struct="transform"
	argument "field" type="node" aspect="Field"
	return type="node" node="InputHandler" parent="/input/handler" name_argument="name"
}
aspect "InputHandler" {
	description "Handle raw input events."
	inherits "Spatial"

	signal "input" side="client" {
		description "An input method has sent an input event on this frame. All the inputs are sent by the time `/:frame` is called."

		argument "method" type="node" aspect="InputMethod"
		argument "data" type="struct" struct="InputData"
	}
}
