version (u32)1
interface (u64)2
description r#"
	Analog SDFs to define boundaries for input, interaction, and behavior.
"#

struct "RayMarchResult" {
	description "Information about raymarching a field"

	field "ray_origin" type="vec3"
	field "ray_direction" type="vec3" 
	field "min_distance" type="float"
	field "deepest_point_distance" type="float"
	field "ray_length" type="float"
	field "ray_steps" type="uint"
}

method "import_field_ref" side="server" {
	description "Import a FieldRef from a UUID generated by Field::export_field"
	
    argument "uid" type="id"
	return type="node" aspect="FieldRef"
}
aspect "FieldRef" {
	description "A node that is spatial and contains an SDF"
	inherits "SpatialRef"

	method "distance" side="server" {
		description "Get the distance to the surface of this field relative to the `point` in `space`"
		argument "space" type="node" aspect="SpatialRef"
		argument "point" type="vec3"
		return type="float"
	}

	method "normal" side="server" {
		description "Get a vector pointing away from surface of this field relative to the `point` in `space`"
		argument "space" type="node" aspect="SpatialRef"
		argument "point" type="vec3"
		return type="vec3"
	}

	method "closest_point" side="server" {
		description "Get the closest point on the surface of this field relative to the `point` in `space`"
		argument "space" type="node" aspect="SpatialRef"
		argument "point" type="vec3"
		return type="vec3"
	}

	method "ray_march" side="server" {
		description "Get information from the server raymarching the given ray in `space` through this field such as steps, closest/deepest distance, etc."
		argument "space" type="node" aspect="SpatialRef" 
		argument "ray_origin" type="vec3"
		argument "ray_direction" type="vec3"
		return type="struct" struct="RayMarchResult"
	}
}


struct "CylinderShape" {
	description "Cylinder shape info"

	field "length" type="float"
	field "radius" type="float"
}
struct "TorusShape" {
	description "Torus shape info"

	field "radius_a" type="float"
	field "radius_b" type="float"
}
union "Shape" {
	description "The shape of a given field."
	
	option name="Box" type="vec3" description="Box with a given size in meters"
	option name="Cylinder" type="struct" struct="CylinderShape"
	option name="Sphere" type="float" description="Sphere with a given radius in meters"
	option name="Torus" type="struct" struct="TorusShape"
}

signal "create_field" side="server" {
	description "Create a field with the shape of a box"
    
    argument "id" type="id"
	argument "parent" type="node" aspect="SpatialRef"
	argument "transform" type="struct" struct="Transform"
	argument "shape" type="union" union="Shape"
	return type="node" node="Field" id_argument="id"
}
aspect "Field" {
	description "An owned field with adjustable shape"
	inherits "Spatial"
	inherits "FieldRef"

	signal "set_shape" side="server" {
		description "Set the shape of this field (and its parameters)"
		argument "shape" type="union" union="shape"
	}

	method "export_field" side="server" {
		description "Return a UUID representing this node's FieldRef that you can send to other clients"

		return type="id"
	}
}
